{
    "sourceFile": "src/utils/func.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1649935804527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1649935869985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,4 +4,26 @@\n     if (timeoutID != null) clearTimeout(timeoutID)\r\n     timeoutID = setTimeout(fn, wait)\r\n   }\r\n }\r\n+// fn是我们需要包装的事件回调, interval是时间间隔的阈值\r\n+export function throttle(fn, interval) {\r\n+  // last为上一次触发回调的时间\r\n+  let last = 0\r\n+\r\n+  // 将throttle处理结果当作函数返回\r\n+  return function () {\r\n+    // 保留调用时的this上下文\r\n+    let context = this\r\n+    // 保留调用时传入的参数\r\n+    let args = arguments\r\n+    // 记录本次触发回调的时间\r\n+    let now = +new Date()\r\n+\r\n+    // 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值\r\n+    if (now - last >= interval) {\r\n+      // 如果时间间隔大于我们设定的时间间隔阈值，则执行回调\r\n+      last = now;\r\n+      fn.apply(context, args);\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1650971596855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,4 +26,74 @@\n       fn.apply(context, args);\r\n     }\r\n   }\r\n }\r\n+export function defaultSorting() {\r\n+  const interval = 100\r\n+  let page = 0\r\n+  let num = 0\r\n+  boxItemData.value.forEach(element => {\r\n+    let Y = num * 100\r\n+    if (Y > boxContainer.value.height - 100) {\r\n+      page++\r\n+      num = 0\r\n+      Y = num * 100\r\n+    }\r\n+    let X = 100 * page\r\n+    element.X = X\r\n+    element.Y = Y\r\n+    num++\r\n+  });\r\n+\r\n+}\r\n+export function topSorting() {\r\n+  const interval = 100\r\n+  let page = 0\r\n+  let num = 0\r\n+  boxItemData.value.forEach(element => {\r\n+    let X = num * 100\r\n+    if (X > boxContainer.value.width - 100) {\r\n+      page++\r\n+      num = 0\r\n+      X = num * 100\r\n+    }\r\n+    let Y = 100 * page\r\n+    element.X = X\r\n+    element.Y = Y\r\n+    num++\r\n+  });\r\n+\r\n+}\r\n+export function rightSorting() {\r\n+  const interval = 100\r\n+  let page = Math.floor(boxContainer.value.width * 0.01) - 1\r\n+  let num = 0\r\n+  boxItemData.value.forEach(element => {\r\n+    let Y = num * 100\r\n+    if (Y > boxContainer.value.height - 100) {\r\n+      page--\r\n+      num = 0\r\n+      Y = num * 100\r\n+    }\r\n+    let X = 100 * page\r\n+    element.X = X\r\n+    element.Y = Y\r\n+    num++\r\n+  });\r\n+}\r\n+export function bottomSorting() {\r\n+  const interval = 100\r\n+  let page = Math.floor(boxContainer.value.height * 0.01) - 1\r\n+  let num = 0\r\n+  boxItemData.value.forEach(element => {\r\n+    let X = num * 100\r\n+    if (X > boxContainer.value.width - 100) {\r\n+      page--\r\n+      num = 0\r\n+      X = num * 100\r\n+    }\r\n+    let Y = 100 * page\r\n+    element.X = X\r\n+    element.Y = Y\r\n+    num++\r\n+  });\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1650971737917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,75 +25,5 @@\n       last = now;\r\n       fn.apply(context, args);\r\n     }\r\n   }\r\n-}\r\n-export function defaultSorting() {\r\n-  const interval = 100\r\n-  let page = 0\r\n-  let num = 0\r\n-  boxItemData.value.forEach(element => {\r\n-    let Y = num * 100\r\n-    if (Y > boxContainer.value.height - 100) {\r\n-      page++\r\n-      num = 0\r\n-      Y = num * 100\r\n-    }\r\n-    let X = 100 * page\r\n-    element.X = X\r\n-    element.Y = Y\r\n-    num++\r\n-  });\r\n-\r\n-}\r\n-export function topSorting() {\r\n-  const interval = 100\r\n-  let page = 0\r\n-  let num = 0\r\n-  boxItemData.value.forEach(element => {\r\n-    let X = num * 100\r\n-    if (X > boxContainer.value.width - 100) {\r\n-      page++\r\n-      num = 0\r\n-      X = num * 100\r\n-    }\r\n-    let Y = 100 * page\r\n-    element.X = X\r\n-    element.Y = Y\r\n-    num++\r\n-  });\r\n-\r\n-}\r\n-export function rightSorting() {\r\n-  const interval = 100\r\n-  let page = Math.floor(boxContainer.value.width * 0.01) - 1\r\n-  let num = 0\r\n-  boxItemData.value.forEach(element => {\r\n-    let Y = num * 100\r\n-    if (Y > boxContainer.value.height - 100) {\r\n-      page--\r\n-      num = 0\r\n-      Y = num * 100\r\n-    }\r\n-    let X = 100 * page\r\n-    element.X = X\r\n-    element.Y = Y\r\n-    num++\r\n-  });\r\n-}\r\n-export function bottomSorting() {\r\n-  const interval = 100\r\n-  let page = Math.floor(boxContainer.value.height * 0.01) - 1\r\n-  let num = 0\r\n-  boxItemData.value.forEach(element => {\r\n-    let X = num * 100\r\n-    if (X > boxContainer.value.width - 100) {\r\n-      page--\r\n-      num = 0\r\n-      X = num * 100\r\n-    }\r\n-    let Y = 100 * page\r\n-    element.X = X\r\n-    element.Y = Y\r\n-    num++\r\n-  });\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1649935804527,
            "name": "Commit-0",
            "content": "export function debounce(fn, wait) {\r\n  let timeoutID\r\n  return function () {\r\n    if (timeoutID != null) clearTimeout(timeoutID)\r\n    timeoutID = setTimeout(fn, wait)\r\n  }\r\n}\r\n"
        }
    ]
}