{
    "sourceFile": "src/utils/axios.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1649469160153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1649470363180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,82 @@\n-import axios, { AxiosResponse, AxiosRequestConfig } from 'axios';\r\n+import Axios, { AxiosError, AxiosResponse, AxiosRequestConfig } from 'axios'\r\n+import { ElMessage as $message } from 'element-plus'\r\n+// import * as nProgress from 'nprogress'\r\n+const BASE_URL = 'http://www.foogeoo.ltd:9999/blog'\r\n+const TIME_OUT = 5000\r\n \r\n-const service = axios.create();\r\n-\r\n-// Request interceptors\r\n-service.interceptors.request.use(\r\n-  (config: AxiosRequestConfig) => {\r\n-    // do something\r\n-    return config;\r\n-  },\r\n-  (error: any) => {\r\n-    Promise.reject(error);\r\n+// 通过Axios.create()方法创建一个自定义配置的axios实例\r\n+const instance = Axios.create({\r\n+  baseURL: BASE_URL,\r\n+  timeout: TIME_OUT,\r\n+  headers: {\r\n+    'content-type': 'application/json',\r\n+    // 'access-control-allow-origin': '*'\r\n   }\r\n-);\r\n+})\r\n+instance.interceptors.request.use((config) => {\r\n+  // nProgress.start()\r\n \r\n-// Response interceptors\r\n-service.interceptors.response.use(\r\n-  async (response: AxiosResponse) => {\r\n-    // do something\r\n+  return config;\r\n+})\r\n+// 使用后置拦截器，对获取的响应进行拦截：\r\n+instance.interceptors.response.use(\r\n+  (res: AxiosResponse) => {\r\n+    // nProgress.done()\r\n+    if (String(res.status).indexOf('2') !== 0) {\r\n+      return {\r\n+        code: res.status,\r\n+        message: res.data.message || '请求异常，请刷新重试',\r\n+        result: false\r\n+      }\r\n+    }\r\n+    return Promise.reject(res)\r\n   },\r\n-  (error: any) => {\r\n-    // do something\r\n-    return Promise.reject(error);\r\n+  (error: AxiosError) => {\r\n+    // nProgress.done()\r\n+    if (error && error.response) {\r\n+      errorHandle(error.response.status, error.response)\r\n+      return Promise.reject(error.response)\r\n+    }\r\n+    // console.log('网络请求失败, 请刷新重试')\r\n+    $message.error('网络请求失败, 请刷新重试')\r\n+    return Promise.reject(error)\r\n   }\r\n-);\r\n+)\r\n+// 当捕获到错误请求时，可以自定义错误处理：\r\n+const errorHandle = (status: number, error: any): void => {\r\n+  // HTTP状态码判断\r\n+  // switch (status) {\r\n+  //   case 401:\r\n+  //     return alert(`Error Code: ${status}, Message: ${error.msg || '登录失效，请重新登录'}`)\r\n+  //   case 403:\r\n+  //     return alert(`Error Code: ${status}, Message: ${error.msg || '你没有访问权限'}`)\r\n+  //   case 500:\r\n+  //     return alert(`Error Code: ${status}, Message: ${error.msg || '后台错误，请联系管理员'}`)\r\n+  //   case 502:\r\n+  //     return alert(`Error Code: ${status}, Message: ${error.msg || '平台环境异常'}`)\r\n+  //   default:\r\n+  //     alert(`Error Code: ${status}, Message: ${error.msg || '未知错误，请刷新重试'}`)\r\n+  // }\r\n+}\r\n+const getPromise = (method, url, params, config = {}) => {\r\n+  return new Promise((resolve, reject) => {\r\n+    instance[method](url, params, config).catch(e => e.data)\r\n+      .then(res => resolve(res))\r\n+      .catch(err => reject(err))\r\n+  })\r\n+}\r\n \r\n-export default service;\r\n+// 导出我们常用的请求方法：\r\n+const get = (url: string, params?: any) => getPromise('get', url, { params })\r\n+const post = (url: string, params: any, config?: AxiosRequestConfig) => getPromise('post', url, params, config)\r\n+const del = (url: string, params?: any, config?: AxiosRequestConfig) => getPromise('delete', url, params, config)\r\n+const put = (url: string, params?: any, config?: AxiosRequestConfig) => getPromise('put', url, params, config)\r\n+export {\r\n+  get,\r\n+  post,\r\n+  del,\r\n+  put,\r\n+  instance\r\n+}\r\n+\r\n+\r\n"
                },
                {
                    "date": 1649470400097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,11 +57,11 @@\n   //   default:\r\n   //     alert(`Error Code: ${status}, Message: ${error.msg || '未知错误，请刷新重试'}`)\r\n   // }\r\n }\r\n-const getPromise = (method, url, params, config = {}) => {\r\n+const getPromise = (method: any, url: any, params: any, config = {}) => {\r\n   return new Promise((resolve, reject) => {\r\n-    instance[method](url, params, config).catch(e => e.data)\r\n+    instance[method](url, params, config).catch(e: any => e.data)\r\n       .then(res => resolve(res))\r\n       .catch(err => reject(err))\r\n   })\r\n }\r\n"
                },
                {
                    "date": 1649470472688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   // }\r\n }\r\n const getPromise = (method: any, url: any, params: any, config = {}) => {\r\n   return new Promise((resolve, reject) => {\r\n-    instance[method](url, params, config).catch(e: any => e.data)\r\n+    instance[method](url, params, config).catch(e => e.data)\r\n       .then(res => resolve(res))\r\n       .catch(err => reject(err))\r\n   })\r\n }\r\n"
                },
                {
                    "date": 1649470775032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n   //   default:\r\n   //     alert(`Error Code: ${status}, Message: ${error.msg || '未知错误，请刷新重试'}`)\r\n   // }\r\n }\r\n-const getPromise = (method: any, url: any, params: any, config = {}) => {\r\n+const getPromise = (method, url, params, config = {}) => {\r\n   return new Promise((resolve, reject) => {\r\n     instance[method](url, params, config).catch(e => e.data)\r\n       .then(res => resolve(res))\r\n       .catch(err => reject(err))\r\n"
                },
                {
                    "date": 1649470786822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n   //   default:\r\n   //     alert(`Error Code: ${status}, Message: ${error.msg || '未知错误，请刷新重试'}`)\r\n   // }\r\n }\r\n-const getPromise = (method, url, params, config = {}) => {\r\n+const getPromise = (method: any, url, params, config = {}) => {\r\n   return new Promise((resolve, reject) => {\r\n     instance[method](url, params, config).catch(e => e.data)\r\n       .then(res => resolve(res))\r\n       .catch(err => reject(err))\r\n"
                },
                {
                    "date": 1649470808531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,19 +10,18 @@\n   timeout: TIME_OUT,\r\n   headers: {\r\n     'content-type': 'application/json',\r\n     // 'access-control-allow-origin': '*'\r\n+\r\n   }\r\n })\r\n instance.interceptors.request.use((config) => {\r\n-  // nProgress.start()\r\n \r\n   return config;\r\n })\r\n // 使用后置拦截器，对获取的响应进行拦截：\r\n instance.interceptors.response.use(\r\n   (res: AxiosResponse) => {\r\n-    // nProgress.done()\r\n     if (String(res.status).indexOf('2') !== 0) {\r\n       return {\r\n         code: res.status,\r\n         message: res.data.message || '请求异常，请刷新重试',\r\n@@ -31,9 +30,8 @@\n     }\r\n     return Promise.reject(res)\r\n   },\r\n   (error: AxiosError) => {\r\n-    // nProgress.done()\r\n     if (error && error.response) {\r\n       errorHandle(error.response.status, error.response)\r\n       return Promise.reject(error.response)\r\n     }\r\n@@ -57,9 +55,9 @@\n   //   default:\r\n   //     alert(`Error Code: ${status}, Message: ${error.msg || '未知错误，请刷新重试'}`)\r\n   // }\r\n }\r\n-const getPromise = (method: any, url, params, config = {}) => {\r\n+const getPromise = (method, url, params, config = {}) => {\r\n   return new Promise((resolve, reject) => {\r\n     instance[method](url, params, config).catch(e => e.data)\r\n       .then(res => resolve(res))\r\n       .catch(err => reject(err))\r\n"
                },
                {
                    "date": 1649471495015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n const BASE_URL = 'http://www.foogeoo.ltd:9999/blog'\r\n const TIME_OUT = 5000\r\n \r\n // 通过Axios.create()方法创建一个自定义配置的axios实例\r\n-const instance = Axios.create({\r\n+const instance: any = Axios.create({\r\n   baseURL: BASE_URL,\r\n   timeout: TIME_OUT,\r\n   headers: {\r\n     'content-type': 'application/json',\r\n@@ -55,13 +55,13 @@\n   //   default:\r\n   //     alert(`Error Code: ${status}, Message: ${error.msg || '未知错误，请刷新重试'}`)\r\n   // }\r\n }\r\n-const getPromise = (method, url, params, config = {}) => {\r\n+const getPromise = (method: string, url: string, params: { params: any }, config = {}) => {\r\n   return new Promise((resolve, reject) => {\r\n-    instance[method](url, params, config).catch(e => e.data)\r\n-      .then(res => resolve(res))\r\n-      .catch(err => reject(err))\r\n+    instance[method](url, params, config).catch((e: { data: any }) => e.data)\r\n+      .then((res: unknown) => resolve(res))\r\n+      .catch((err: any) => reject(err))\r\n   })\r\n }\r\n \r\n // 导出我们常用的请求方法：\r\n"
                },
                {
                    "date": 1649471500677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     // 'access-control-allow-origin': '*'\r\n \r\n   }\r\n })\r\n-instance.interceptors.request.use((config) => {\r\n+instance.interceptors.request.use((config: any) => {\r\n \r\n   return config;\r\n })\r\n // 使用后置拦截器，对获取的响应进行拦截：\r\n"
                }
            ],
            "date": 1649469160153,
            "name": "Commit-0",
            "content": "import axios, { AxiosResponse, AxiosRequestConfig } from 'axios';\r\n\r\nconst service = axios.create();\r\n\r\n// Request interceptors\r\nservice.interceptors.request.use(\r\n  (config: AxiosRequestConfig) => {\r\n    // do something\r\n    return config;\r\n  },\r\n  (error: any) => {\r\n    Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptors\r\nservice.interceptors.response.use(\r\n  async (response: AxiosResponse) => {\r\n    // do something\r\n  },\r\n  (error: any) => {\r\n    // do something\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default service;\r\n"
        }
    ]
}